#!/bin/bash
# Convert a Python application created via the Control Panel using our app template.
# Usage: app-template-py APP_NAME [PY_VERSION]


# Validate script arguments.
[ $# -lt 1 ] && { echo -e "\e[1;37mUsage:\e[0m \e[33m`basename ${BASH_SOURCE[0]}` APP_NAME [PY_VERSION]\e[0m"; exit 1; }


. `dirname ${BASH_SOURCE[0]}`/_py-utils


# Initialization.
APP_NAME=$1
PY_VERSION=$2
[ -z "$PY_VERSION" ] && PY_EXEC=`pyLatestAvailableExec` || PY_EXEC=`pyWhichExec $PY_VERSION`

TEMPLATE_DIR="$HOME/templates/python"
APP_DIR="$HOME/apps/$APP_NAME"


# Check that application exists.
[ -d "$APP_DIR" ] || { echo -e "\e[31mERROR: App '$APP_NAME' does not exist.\e[0m"; exit 1; }

# Install Python version if not available.
if [ -z "$PY_EXEC" ]; then
  echo -e "\e[1;37mInstalling Python $PY_VERSION…\e[0m"
  py-install-version $PY_VERSION
  if [ $? = 0 ]; then
    PY_EXEC=`pyWhichExec $PY_VERSION`
    [ -z "$PY_EXEC" ] && { echo -e "\e[31mERROR: Python $PY_VERSION executable not found.\e[0m"; exit 1; }
  else
    echo -e "\e[31mERROR: Installation of Python $PY_VERSION failed.\e[0m"
    echo -e "Try installing it manually using: \e[36mpy-install-version $PY_VERSION --force\e[0m"
    exit 1
  fi
fi


# Converting the app.
cd $APP_DIR
echo -e "\n\e[1;37mConverting \e[36m$APP_DIR\e[1;37m using Python \e[36m`pyRealVersion $PY_EXEC`\e[1;37m.\e[0m\n"

# Retrieve application port.
APP_PORT=`grep -oP "^http = 127\.0\.0\.1:\K[0-9]+$" uwsgi.ini`

# Remove current cron job.
echo -e "\e[1;37mRemoving current cron job.\e[0m"
cron_selector="$APP_DIR/start"
CRON_JOB_SCHEDULE=`crontab -l | grep -oP ".+(?= ${cron_selector}.*)"`
[ -n "$CRON_JOB_SCHEDULE" ] && (crontab -l | grep -v "$cron_selector" | crontab -)

# Stop the current application.
[ -f ./stop ] && ./stop > /dev/null

# Move current files to backup folder.
echo -e "\e[1;37mMoving current files into '.original-files/'.\e[0m"
mkdir -p .original-files && chmod 770 .original-files
mv * .* .original-files/ 2> /dev/null


# Create files from template.
echo -e "\e[1;37mCopying template files.\e[0m"
cp -r $TEMPLATE_DIR/. .
rm README.md
find . -name .gitkeep -delete

# Create virtual environment.
echo -e "\e[1;37mCreating virtual environment.\e[0m"
$PY_EXEC -m venv venv
[ $? = 0 ] || { echo -e "\e[31mERROR: Virtual environment creation failed.\e[0m"; exit 1; }

# Update configuration files.
sed -i "s#%HOME%#$HOME#g;s/%APP_NAME%/$APP_NAME/g;s/%APP_PORT%/$APP_PORT/" uwsgi.ini

# Ensure permissions are correct.
chmod 755 venv
chmod 700 app tmp
chmod 644 uwsgi.ini

# Install pip packages.
echo -e "\e[1;37mInstalling pip packages…\e[0m"
. venv/bin/activate
pip install --upgrade -r opalstack-requirements.txt
deactivate

# Create new cron job.
echo -e "\e[1;37mCreating new cron job.\e[0m"
[ -z "$CRON_JOB_SCHEDULE" ] && CRON_JOB_SCHEDULE="*/10 * * * *"
(crontab -l; echo "$CRON_JOB_SCHEDULE \$HOME/bin/app-control $APP_NAME cron") | crontab -


# Execution report.
echo -e "\n\e[32mApplication \e[36m$APP_NAME\e[32m successfully converted.\e[0m"
echo -e "\n\e[1;37mNext steps:\e[0m"
echo -e "- Copy your application files in \e[36m$APP_DIR/app/\e[0m"
echo -e "- Modify \e[36m$APP_DIR/uwsgi.ini\e[0m if/as needed"
echo -e "- Start the application: \e[36mapp-control $APP_NAME start\e[0m"
echo
